AWSTemplateFormatVersion: "2010-09-09"
Description: AWS CodePipeline for Node Builds
Parameters:
  GitHubToken:
    NoEcho: true
    Type: String
    Description: Github Token generated from
  GitHubRepoOwner:
    Type: String
    Description: Owner of the GitHub Repository
  GitHubRepoName:
    Type: String
    Description: Name of the GitHub Repository
  GitHubBranch:
    Type: String
    Description: Name of branch to use inside the GitHub Repository
    Default: master
  S3ArtifactStore:
    Type: String
    Description: S3 Bucket where artifacts will be stored
Resources:

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-b70554c8
      Tags:
        -
          Key: name
          Value: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch ] ]
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum -y update
            yum install -y ruby
            yum install -y aws-cli
            cd /home/ec2-user
            aws s3 cp s3://aws-codedeploy-us-east-1/latest/install . --region us-east-1
            chmod +x ./install
            ./install auto
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash
            . ~/.nvm/nvm.sh
            nvm install 6.3.1
            node -e "console.log('Running Node.js ' + process.version)"

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref S3ArtifactStore


  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "arn:aws:logs:*:*:log-group:/aws/codebuild/*"
              -
                Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:PutObject"
                Resource: "arn:aws:s3:::codepipeline-*/*"

  TestCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch, test ] ]
      Description: CodeBuild project for running Node tests
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Name: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch, test ] ]
        Type: CODEPIPELINE
        Packaging: NONE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.1
          phases:
            install:
              commands:
                - npm install
                - npm install -g mocha
            pre_build:
              commands:
                - npm run lint
            build:
              commands:
                - npm test
      TimeoutInMinutes: 10
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/nodejs:6.3.1

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch ] ]
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Name: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch ] ]
        Type: CODEPIPELINE
        Packaging: NONE
      Environment:
        Type: LINUX_CONTAINER
        # ComputeType options: BUILD_GENERAL1_SMALL, BUILD_GENERAL1_MEDIUM, BUILD_GENERAL1_LARGE
        ComputeType: BUILD_GENERAL1_SMALL
        # Run `aws codebuild list-curated-environment-images` for a complete list of images provided.
        Image: aws/codebuild/nodejs:7.0.0
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 10


  CodeDeployTrustRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: "1"
            Effect: Allow
            Principal:
              Service:
                - codedeploy.us-east-1.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"

  CodeDeployRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeDeployPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Resource: "*"
            Action:
              - ec2:Describe*
          - Effect: Allow
            Resource: "*"
            Action:
              - autoscaling:CompleteLifecycleAction
              - autoscaling:DeleteLifecycleHook
              - autoscaling:DescribeLifecycleHooks
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:PutLifecycleHook
              - autoscaling:RecordLifecycleActionHeartbeat
      Roles:
        - !Ref CodeDeployTrustRole

  DeployApplication:
    Type: "AWS::CodeDeploy::Application"
    Properties:
      ApplicationName: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch ] ]

  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn: DeployApplication
    Properties:
      ApplicationName: !Ref DeployApplication
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentGroupName: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch ] ]
      Ec2TagFilters:
        - Key: name
          Value: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch ] ]
          Type: KEY_AND_VALUE
      ServiceRoleArn: !GetAtt [CodeDeployTrustRole, Arn]
