AWSTemplateFormatVersion: "2010-09-09"
Description: AWS CodePipeline for Node Builds
Parameters:
  GitHubToken:
    NoEcho: true
    Type: String
    Description: Github Token generated from
  GitHubRepoOwner:
    Type: String
    Description: Owner of the GitHub Repository
  GitHubRepoName:
    Type: String
    Description: Name of the GitHub Repository
  GitHubBranch:
    Type: String
    Description: Name of branch to use inside the GitHub Repository
    Default: master
  S3ArtifactStore:
    Type: String
    Description: S3 Bucket where artifacts will be stored
  EC2KeyName:
    Type: String
    Description: Existing KeyName for EC2 instance
Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open ports 22 and 8080
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0

  EC2InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: EC2DeployPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - "s3:Get*"
                  - "s3:List*"
                Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: ami-b70554c8
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      Tags:
        -
          Key: name
          Value: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch ] ]
      KeyName: !Ref EC2KeyName
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum -y update
            yum install -y ruby
            yum install -y aws-cli
            cd /home/ec2-user
            wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto
            curl --silent --location https://rpm.nodesource.com/setup_6.x | sudo bash -
            sudo yum -y install nodejs
            cd /var
            mkdir nodeapp

  CodeDeployTrustRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: "1"
            Effect: Allow
            Principal:
              Service:
                - codedeploy.us-east-1.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"

  CodeDeployRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeDeployPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Resource: "*"
            Action:
              - ec2:Describe*
          - Effect: Allow
            Resource: "*"
            Action:
              - autoscaling:CompleteLifecycleAction
              - autoscaling:DeleteLifecycleHook
              - autoscaling:DescribeLifecycleHooks
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:PutLifecycleHook
              - autoscaling:RecordLifecycleActionHeartbeat
      Roles:
        - !Ref CodeDeployTrustRole

  DeployApplication:
    Type: "AWS::CodeDeploy::Application"
    Properties:
      ApplicationName: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch ] ]

  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn: DeployApplication
    Properties:
      ApplicationName: !Ref DeployApplication
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentGroupName: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch ] ]
      Ec2TagFilters:
        - Key: name
          Value: !Join [ '-' , [ !Ref GitHubRepoName, !Ref GitHubBranch ] ]
          Type: KEY_AND_VALUE
      ServiceRoleArn: !GetAtt [CodeDeployTrustRole, Arn]
